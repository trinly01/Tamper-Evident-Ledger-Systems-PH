/**
 * Generate Chain Entry - Multi-Node Version
 * 
 * Generates global identifiers for distributed ledger system
 * 
 * Local IDs (node-specific):
 *   - id: Auto-generated by talaan_chain_system (different per node)
 * 
 * Global IDs (ledger-wide, same across all nodes):
 *   - talaan_id: Global ledger entry ID
 *   - parent_id: Stores parent's talaan_id (NOT database id!)
 *   - parent_hash: Hash reference
 *   - current_hash: Entry hash
 */

/**
 * Deterministically serializes JSON with sorted keys
 */
function serializeJson(obj) {
  return JSON.stringify(obj, (key, value) => {
    if (value && typeof value === 'object' && !Array.isArray(value)) {
      return Object.keys(value)
        .sort()
        .reduce((sorted, key) => {
          sorted[key] = value[key];
          return sorted;
        }, {});
    }
    return value;
  });
}

/**
 * FNV-1a hash algorithm
 */
function fnv1aHash(str) {
  let hash = 2166136261;
  for (let i = 0; i < str.length; i++) {
    hash ^= str.charCodeAt(i);
    hash = Math.imul(hash, 16777619);
  }
  return (hash >>> 0).toString(16).padStart(8, '0');
}

/**
 * Hash JSON object
 */
function hashJson(json) {
  const serialized = serializeJson(json);
  return fnv1aHash(serialized);
}

/**
 * Main flow operation
 */
module.exports = async function(data) {
  const { $trigger, $accountability, read_parent_entry } = data;
  
  // Global references (ledger-wide)
  // parent_id stores the parent's talaan_id (NOT database id!)
  const parent_id = read_parent_entry && read_parent_entry.length > 0
    ? read_parent_entry[0].talaan_id
    : null;
    
  const parent_hash = read_parent_entry && read_parent_entry.length > 0 
    ? read_parent_entry[0].current_hash 
    : "likha_genesis";
  
  // Build payload
  const payload = {
    $trigger,
    $accountability
  };
  
  // Generate hashes
  const payload_hash = hashJson(payload);
  const current_hash = hashJson({
    parent: parent_hash,
    payload: payload_hash
  });
  
  return {
    // Note: talaan_id is auto-generated by talaan_chain_system
    parent_id,
    parent_hash,
    current_hash,
    payload
  };
}

